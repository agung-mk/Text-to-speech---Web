document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const generateBtn = document.getElementById('generate-btn');
    const downloadBtn = document.getElementById('download-btn');
    const copyLinkBtn = document.getElementById('copyLinkBtn');
    const advancedToggle = document.getElementById('advanced-toggle');
    const advancedSettings = document.getElementById('advanced-settings');
    const outputContainer = document.getElementById('output-container');
    const emptyState = document.getElementById('empty-state');
    const audioPlayer = document.getElementById('audio-player');
    const loadingOverlay = document.getElementById('loadingOverlay');
    const textInput = document.getElementById('tts-text');
    const clearTextBtn = document.getElementById('clearText');
    const charCount = document.getElementById('charCount');
    const toast = document.getElementById('toast');
    
    // Character count update
    textInput.addEventListener('input', function() {
        charCount.textContent = this.value.length;
    });
    
    // Clear text button
    clearTextBtn.addEventListener('click', function() {
        textInput.value = '';
        charCount.textContent = '0';
    });
    
    // Toggle advanced settings
    advancedToggle.addEventListener('click', function() {
        advancedSettings.classList.toggle('hidden');
        const icon = document.getElementById('advancedIcon');
        icon.classList.toggle('rotate-180');
    });
    
    // Generate TTS
    generateBtn.addEventListener('click', async function() {
        const text = textInput.value.trim();
        const voice = document.getElementById('voice-select').value;
        const vibe = document.getElementById('vibe-select').value;
        
        // Get prompt values
        const prompt = {};
        document.querySelectorAll('#advanced-settings input').forEach(input => {
            const key = input.id.replace('prompt-', '');
            prompt[key] = input.value;
        });
        
        if (!text) {
            showToast('Error', 'Please enter some text to convert to speech.', 'error');
            return;
        }
        
        // Show loading overlay
        loadingOverlay.classList.remove('hidden');
        simulateProgress();
        
        try {
            // Disable generate button during processing
            generateBtn.disabled = true;
            generateBtn.innerHTML = '<i class="bi bi-arrow-repeat animate-spin mr-2"></i> Processing...';
            
            const response = await fetch('/api/generate-tts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ text, voice, vibe, prompt })
            });
            
            const data = await response.json();
            
            if (data.success) {
                // Set audio source
                audioPlayer.src = data.audioUrl;
                
                // Show output
                emptyState.classList.add('hidden');
                outputContainer.classList.remove('hidden');
                
                // Update generation details
                document.getElementById('outputVoice').textContent = data.params.voice;
                document.getElementById('outputVibe').textContent = data.params.vibe || 'None';
                document.getElementById('outputLength').textContent = `${Math.ceil(text.length / 5)}s (approx)`;
                
                // Set download button
                downloadBtn.onclick = () => {
                    const a = document.createElement('a');
                    a.href = data.audioUrl;
                    a.download = `voicegen-${new Date().getTime()}.mp3`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                };
                
                // Set copy link button
                copyLinkBtn.onclick = () => {
                    const url = `${window.location.origin}${data.audioUrl}`;
                    navigator.clipboard.writeText(url).then(() => {
                        showToast('Success', 'Share link copied to clipboard!', 'success');
                    });
                };
                
                showToast('Success', 'Audio generated successfully!', 'success');
            } else {
                showToast('Error', data.error || 'Failed to generate audio', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('Error', 'An error occurred while generating audio', 'error');
        } finally {
            // Hide loading overlay and reset button
            loadingOverlay.classList.add('hidden');
            generateBtn.disabled = false;
            generateBtn.innerHTML = '<i class="bi bi-magic mr-2"></i> Generate Speech';
        }
    });
    
    // Simulate progress bar animation
    function simulateProgress() {
        const progressBar = document.getElementById('progressBar');
        let progress = 0;
        const interval = setInterval(() => {
            progress += Math.random() * 10;
            if (progress >= 100) {
                progress = 100;
                clearInterval(interval);
            }
            progressBar.style.width = `${progress}%`;
        }, 300);
        
        // Clear interval when loading is done
        loadingOverlay.addEventListener('transitionend', function handler() {
            if (loadingOverlay.classList.contains('hidden')) {
                clearInterval(interval);
                progressBar.style.width = '0%';
                loadingOverlay.removeEventListener('transitionend', handler);
            }
        });
    }
    
    // Show toast notification
    function showToast(title, message, type) {
        const toastIcon = document.getElementById('toastIcon');
        const toastTitle = document.getElementById('toastTitle');
        const toastMessage = document.getElementById('toastMessage');
        
        // Set icon based on type
        let iconClass, iconColor;
        switch(type) {
            case 'success':
                iconClass = 'bi-check-circle-fill';
                iconColor = 'text-green-500';
                break;
            case 'error':
                iconClass = 'bi-exclamation-triangle-fill';
                iconColor = 'text-red-500';
                break;
            default:
                iconClass = 'bi-info-circle-fill';
                iconColor = 'text-blue-500';
        }
        
        toastIcon.className = `bi ${iconClass} ${iconColor} text-lg`;
        toastTitle.textContent = title;
        toastMessage.textContent = message;
        
        // Show toast
        toast.classList.remove('translate-y-10', 'opacity-0');
        toast.classList.add('translate-y-0', 'opacity-100');
        
        // Auto hide after 5 seconds
        setTimeout(() => {
            toast.classList.remove('translate-y-0', 'opacity-100');
            toast.classList.add('translate-y-10', 'opacity-0');
        }, 5000);
    }
    
    // Add animation to buttons on hover
    const buttons = document.querySelectorAll('button:not(#generate-btn)');
    buttons.forEach(button => {
        button.addEventListener('mouseenter', () => {
            button.classList.add('animate__animated', 'animate__pulse');
        });
        button.addEventListener('mouseleave', () => {
            button.classList.remove('animate__animated', 'animate__pulse');
        });
    });
});
